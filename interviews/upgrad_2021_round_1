//Q1 - explain the way you would implement the bookmyshow event page like how many API are needed, will you use server side rendering or client side rendering or render important stuff on server and remaining on client side and why - explain

//Q2 - implement debounce method - using input field - added code the end of this doc

const debounce = (func, delay) => {
  let inDebounce;
  return function () {
    const context = this;
    const args = arguments;
    clearTimeout(inDebounce);
    inDebounce = setTimeout(() => {
      func.apply(context, args);
    }, delay);
  };
};


//Q3 - implement function for sum(1)(3)(5)...() // 9 - method can be called any number of times and final call should happen without any argument

function sum(a) {
    return function(b) {
        return b ? sum(a+b) : a;
    }
}


//Q4 - output for below code

for(var i = 0; i < 6; i++) {
 setTimeout(() => console.log(i), i * 100)//6 0 100 200 300 400 500
}
console.log(i--);
setTimeout(() => console.log(--i), 0)

answer - 6 5 4 4 4 4 4 4


//Q5 - output for below code
try {
Promise.reject(100)
    .then((d) => { console.log(d) })
    .catch((d) => { console.log(d + 1) })
    .then(() => { console.log(1); throw new Error() })
    .catch(() => { console.log(2) })
    .then(() => { console.log(3); throw new Error() })
    .then(() => { console.log(4) })
} catch(e) {
  console.log('error: ', e)
}

answer - 101 1 2 3 error



==END===========
<body>
    <div id="root"></div>
    <script type="text/jsx">
      ReactDOM.render(
        <App/>,
        document.getElementById('root')
      );


    function App() {
      
       let [inputValue, setInputValue] = React.useState();
      
      var betterFunc = debounce((args)=>{console.log(args); setInputValue(args)}, 3000);
      
      return (
      <div>
      <input type="text" onChange={(e) => betterFunc(e.target.value)} />
          <p>{inputValue}</p>

      </div>
      );
    }

    function debounce(func, delay) {
      console.log("debounce method");
      let inDebounce;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(inDebounce);
        inDebounce = setTimeout(()=>func.apply(context, args), delay);
      }
    }

    </script>
  </body>